{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random as rnd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# machine learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC, LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Perceptron\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import SGDClassifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_test = pd.read_csv(\"F:/docs/Python/Titanic/test.csv\") # Reading the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic_train = pd.read_csv(\"F:/docs/Python/Titanic/train.csv\") # Reading the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  \n",
       "5      0            330877   8.4583   NaN        Q  \n",
       "6      0             17463  51.8625   E46        S  \n",
       "7      1            349909  21.0750   NaN        S  \n",
       "8      2            347742  11.1333   NaN        S  \n",
       "9      0            237736  30.0708   NaN        C  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.head(10) #10 rows of the data set to look at the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>897</td>\n",
       "      <td>3</td>\n",
       "      <td>Svensson, Mr. Johan Cervin</td>\n",
       "      <td>male</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7538</td>\n",
       "      <td>9.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>898</td>\n",
       "      <td>3</td>\n",
       "      <td>Connolly, Miss. Kate</td>\n",
       "      <td>female</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330972</td>\n",
       "      <td>7.6292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>899</td>\n",
       "      <td>2</td>\n",
       "      <td>Caldwell, Mr. Albert Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>248738</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>900</td>\n",
       "      <td>3</td>\n",
       "      <td>Abrahim, Mrs. Joseph (Sophie Halaut Easu)</td>\n",
       "      <td>female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2657</td>\n",
       "      <td>7.2292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>901</td>\n",
       "      <td>3</td>\n",
       "      <td>Davies, Mr. John Samuel</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>A/4 48871</td>\n",
       "      <td>24.1500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "5          897       3                    Svensson, Mr. Johan Cervin    male   \n",
       "6          898       3                          Connolly, Miss. Kate  female   \n",
       "7          899       2                  Caldwell, Mr. Albert Francis    male   \n",
       "8          900       3     Abrahim, Mrs. Joseph (Sophie Halaut Easu)  female   \n",
       "9          901       3                       Davies, Mr. John Samuel    male   \n",
       "\n",
       "    Age  SibSp  Parch     Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0     330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0     363272   7.0000   NaN        S  \n",
       "2  62.0      0      0     240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0     315154   8.6625   NaN        S  \n",
       "4  22.0      1      1    3101298  12.2875   NaN        S  \n",
       "5  14.0      0      0       7538   9.2250   NaN        S  \n",
       "6  30.0      0      0     330972   7.6292   NaN        Q  \n",
       "7  26.0      1      1     248738  29.0000   NaN        S  \n",
       "8  18.0      0      0       2657   7.2292   NaN        C  \n",
       "9  21.0      2      0  A/4 48871  24.1500   NaN        S  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_test.head(10) #10 rows of the data set to look at the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We also combine these datasets to run certain operations on both datasets together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic = [titanic_train , titanic_test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['PassengerId' 'Survived' 'Pclass' 'Name' 'Sex' 'Age' 'SibSp' 'Parch'\n",
      " 'Ticket' 'Fare' 'Cabin' 'Embarked']\n"
     ]
    }
   ],
   "source": [
    "print(titanic_train.columns.values) #To see the feature of the Data Set(Categorical and Numerical Columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Categorical: Survived, Sex, and Embarked. Ordinal: Pclass\n",
    "#Continous: Age, Fare. Discrete: SibSp, Parch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.6+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(titanic_train.info())#data types for various features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      "PassengerId    418 non-null int64\n",
      "Pclass         418 non-null int64\n",
      "Name           418 non-null object\n",
      "Sex            418 non-null object\n",
      "Age            332 non-null float64\n",
      "SibSp          418 non-null int64\n",
      "Parch          418 non-null int64\n",
      "Ticket         418 non-null object\n",
      "Fare           417 non-null float64\n",
      "Cabin          91 non-null object\n",
      "Embarked       418 non-null object\n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(titanic_test.info())#data types for various features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.describe()#distribution of numerical feature values across the samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Coutts, Master. William Loch \"William\"</td>\n",
       "      <td>male</td>\n",
       "      <td>1601</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Name   Sex Ticket Cabin Embarked\n",
       "count                                      891   891    891   204      889\n",
       "unique                                     891     2    681   147        3\n",
       "top     Coutts, Master. William Loch \"William\"  male   1601    G6        S\n",
       "freq                                         1   577      7     4      644"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train.describe(include=['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.629630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  Survived\n",
       "0       1  0.629630\n",
       "1       2  0.472826\n",
       "2       3  0.242363"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>female</td>\n",
       "      <td>0.742038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>male</td>\n",
       "      <td>0.188908</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  Survived\n",
       "0  female  0.742038\n",
       "1    male  0.188908"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.535885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.464286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.345395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SibSp  Survived\n",
       "1      1  0.535885\n",
       "2      2  0.464286\n",
       "0      0  0.345395\n",
       "3      3  0.250000\n",
       "4      4  0.166667\n",
       "5      5  0.000000\n",
       "6      8  0.000000"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Parch</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.550847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.343658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Parch  Survived\n",
       "3      3  0.600000\n",
       "1      1  0.550847\n",
       "2      2  0.500000\n",
       "0      0  0.343658\n",
       "5      5  0.200000\n",
       "4      4  0.000000\n",
       "6      6  0.000000"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x220a590e6d8>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAADQCAYAAABStPXYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAEiBJREFUeJzt3X+wXGV9x/H3R0CtYuWHVyYCadAyKNoaJSpKbf3ZpmpFK7ZQa3EGJ/6hLbY4TtQ/xLGdwozVOm11jIWKjlXkhyWDjkoRqnYcFBSRGBXUVAIRSPEXTkcNfPvHnoRrci93c+/Zu8/efb9mdvbs2bO735y733z3PM9znpOqQpKk1jxg3AFIkjQXC5QkqUkWKElSkyxQkqQmWaAkSU2yQEmSmmSBGrEkb0myJckNSa5P8rSe3vfFSTb29F539/AeD0pyYZKbk1yTZM3SI9O0mKI8+d0kX0myK8kpfcS1kh047gBWsiRPB14EPLmqfp7kEcAD9+P1B1bVrrmeq6rNwOZ+Iu3FGcAPq+o3k5wKnAv86Zhj0gSYsjz5PvAq4A1jjmMieAQ1WquAnVX1c4Cq2llVtwEk2dYlIknWJbm6Wz47yaYknwE+2B2NPH73Gya5OskJSV6V5J+TPLx7rwd0zz8kyS1JDkrymCSfSnJdks8neWy3zTFJvpjky0ne3tO/9WTggm75YuC5SdLTe2tlm5o8qaptVXUDcG8f77fSWaBG6zPA0Um+neQ9SX5vyNedAJxcVX8GfBT4E4Akq4BHVdV1uzesqh8DXwN2v/cfAZ+uql8Cm4C/rKoTGPxie0+3zbuB91bVU4AfzBdEl6zXz3F73hybHwnc0sW0C/gxcPiQ/15Nt2nKE+0Hm/hGqKruTnIC8Ezg2cCFSTZW1QcWeOnmqvq/bvljwBXAWxkk4EVzbH8hg+a0q4BTgfckORh4BnDRrAOZB3X3JwEv65Y/xKA5bq74n7lAnLPNdbTkPFpa0JTlifaDBWrEquoe4Grg6iRfB04HPgDs4r4j2Afv9bKfzXr9rUn+N8lvM0iu18zxMZuBv09yGINflZ8FHgr8qKrWzhfaQrEn+TzwsDmeekNV/ede67YDRwPbkxwIPBy4a6HPkGCq8kT7wSa+EUpyXJJjZ61aC/xPt7yNQZLAfb/S5vNR4I3Aw6vq63s/WVV3A19i0CRxeVXdU1U/Ab6X5OVdLEnyxO4l/83gFyTAK+b70Kp6ZlWtneM2V9JtZvCfCsApwGfLmYg1hCnLE+0HC9RoHQxckOQbSW4AjgfO7p57G/Du7tfXPQu8z8UMEuVj97PNhcCfd/e7vQI4I8nXgC0MBjIAnAm8NsmXGRzp9OE84PAkNwN/A/QytFdTYWryJMlTkmwHXg68L8mWPt53pYo/ciVJLfIISpLUJAuUJKlJFihJUpMsUJKkJi1rgVq/fn0xOK/Am7eVelsy88TbFNyGsqwFaufOncv5cdJEMk+kAZv4JElNskBJkppkgZIkNckCJUlqkgVKktQkC5QkqUleD2oR1mz8xJ7lbee8cIyRSNLK5RGUJKlJFihJUpMsUJKkJlmgJElNWrBAJXlwki8l+VqSLUne1q0/Jsk1SW5KcmGSB44+XEnStBjmCOrnwHOq6onAWmB9khOBc4F3VdWxwA+BM0YXpiRp2ixYoGrg7u7hQd2tgOcAF3frLwBeMpIIJUlTaag+qCQHJLkeuAO4AvgO8KOq2tVtsh04cp7XbkhybZJr77zzzj5illYc80Ta11AFqqruqaq1wFHAU4HHzbXZPK/dVFXrqmrdzMzM4iOVVjDzRNrXfo3iq6ofAVcDJwKHJNk9E8VRwG39hiZJmmbDjOKbSXJIt/xrwPOArcBVwCndZqcDl40qSEnS9BlmLr5VwAVJDmBQ0D5WVZcn+Qbw0SR/C3wVOG+EcUqSpsyCBaqqbgCeNMf67zLoj5IkqXfOJCFJapIFSpLUJAuUJKlJFihJUpMsUJKkJlmgJElNskBJkppkgZIkNWmYmSQ0Ims2fmLP8rZzXjjGSCSpPR5BSZKaZIGSJDXJAiVJapJ9UD2yT0mS+jPM9aCOTnJVkq1JtiQ5s1t/dpJbk1zf3V4w+nAlSdNimCOoXcBZVfWVJA8DrktyRffcu6rqHaMLT5I0rYa5HtQOYEe3/NMkW4EjRx2YJGm67dcgiSRrGFy88Jpu1euS3JDk/CSH9hybJGmKDV2gkhwMXAK8vqp+ArwXeAywlsER1j/M87oNSa5Ncu2dd97ZQ8jSymOeSPsaqkAlOYhBcfpwVV0KUFW3V9U9VXUv8H7mufx7VW2qqnVVtW5mZqavuKUVxTyR9jXMKL4A5wFbq+qds9avmrXZS4Eb+w9PkjSthhnFdxLwSuDrSa7v1r0ZOC3JWqCAbcBrRhKhJGkqDTOK7wtA5njqk/2HI0nSgFMdSZKaZIGSJDXJAiVJapIFSpLUJAuUJKlJFihJUpMsUJKkJlmgJElNskBJkppkgZIkNckCJUlqkgVKktQkC5QkqUkWKElSk4a5YOHRSa5KsjXJliRndusPS3JFkpu6+0NHH64kaVoMcwS1Czirqh4HnAi8NsnxwEbgyqo6FriyeyxJUi8WLFBVtaOqvtIt/xTYChwJnAxc0G12AfCSUQUpSZo+w1zyfY8ka4AnAdcAR1TVDhgUsSSPnOc1G4ANAKtXr15KrCvCmo2fGHcIatA05cnsHNh2zgvHGIlaN/QgiSQHA5cAr6+qnwz7uqraVFXrqmrdzMzMYmKUVjzzRNrXUAUqyUEMitOHq+rSbvXtSVZ1z68C7hhNiJKkaTTMKL4A5wFbq+qds57aDJzeLZ8OXNZ/eJKkaTVMH9RJwCuBrye5vlv3ZuAc4GNJzgC+D7x8NCFOvv3td7KNXpKGKFBV9QUg8zz93H7DkSRpwJkkJElNskBJkppkgZIkNWm/TtRd6focnDCKE3IdPKGW+f1U3zyCkiQ1yQIlSWqSBUqS1CT7oOaxdx+SberS6A3bjzXfdubtyuIRlCSpSRYoSVKTLFCSpCZZoCRJTXKQxJDmO/G2xSvkesKkpJVgmOtBnZ/kjiQ3zlp3dpJbk1zf3V4w2jAlSdNmmCa+DwDr51j/rqpa290+2W9YkqRpt2CBqqrPAXctQyySJO2xlD6o1yX5C+Ba4Kyq+uFcGyXZAGwAWL169RI+Tlq59jdPpqGfcRr+jbp/ix3F917gMcBaYAfwD/NtWFWbqmpdVa2bmZlZ5MdJK5t5Iu1rUQWqqm6vqnuq6l7g/cBT+w1LkjTtFlWgkqya9fClwI3zbStJ0mIs2AeV5CPAs4BHJNkOvBV4VpK1QAHbgNeMMEZJ0hRasEBV1WlzrD5vBLFIkrSHUx1JkppkgZIkNckCJUlqkgVKktQkC5QkqUkWKElSkyxQkqQmecFCOSmnViy/25PNIyhJUpMsUJKkJlmgJElNskBJkprkIIlGzO7MXY7PsMN45Wrt77wc3+39tXdMLewn7WvBI6gk5ye5I8mNs9YdluSKJDd194eONkxJ0rQZponvA8D6vdZtBK6sqmOBK7vHkiT1ZsECVVWfA+7aa/XJwAXd8gXAS3qOS5I05RbbB3VEVe0AqKodSR4534ZJNgAbAFavXr3Ij5teLbbfq3+Tkifj6t8yD6bTyEfxVdWmqlpXVetmZmZG/XHSRDJPpH0ttkDdnmQVQHd/R38hSZK0+AK1GTi9Wz4duKyfcCRJGhhmmPlHgC8CxyXZnuQM4Bzg+UluAp7fPZYkqTcLDpKoqtPmeeq5PceyR2snGkqSlp9THUmSmmSBkiQ1yQIlSWqSk8XqVwzT/2cfoRbiibXqg0dQkqQmWaAkSU2yQEmSmmSBkiQ1yUESkiZa3wMyhh0EdH9X5XUgUT88gpIkNckCJUlqkgVKktSkFdcHNS1tv8O2u8+33ShOpLy/NnmtPH18hzyhV/dnSQUqyTbgp8A9wK6qWtdHUJIk9XEE9eyq2tnD+0iStId9UJKkJi21QBXwmSTXJdnQR0CSJMHSm/hOqqrbkjwSuCLJN6vqc7M36ArXBoDVq1cv8eP2z7QMmBiV5e7Anu/vtb9/x0n8uy8lTxxoMBwHdUyeJR1BVdVt3f0dwMeBp86xzaaqWldV62ZmZpbycdKKZZ5I+1p0gUry0CQP270M/D5wY1+BSZKm21Ka+I4APp5k9/v8e1V9qpeoJElTb9EFqqq+Czyxx1gWzXbhyTKJfUTSQhZz8rzf//vnMHNJUpMsUJKkJlmgJElNmqjJYvtqu7UNeHm4n9sy7GS+9uneZ9TnTt1fjpg/HkFJkhplgZIkNckCJUlqkgVKktSkiRokMQp2CC+P5byyr+6z2A76adP693DY+Fba39EjKElSkyxQkqQmWaAkSU1qvg/KvgvNtpR+k2FPVJ1G5pOWYlS55RGUJKlJSypQSdYn+VaSm5Ns7CsoSZKWckXdA4B/Af4QOB44LcnxfQUmSZpuSzmCeipwc1V9t6p+AXwUOLmfsCRJ0y5VtbgXJqcA66vq1d3jVwJPq6rX7bXdBmBD9/A44FvzvOUjgJ2LCmb5TUqsxtmvYeLcWVXr9/eN9yNPho2jBcbZv0mJdaE4h8qTpYziyxzr9ql2VbUJ2LTgmyXXVtW6JcSzbCYlVuPs1yjjHDZPRh1Hn4yzf5MSa19xLqWJbztw9KzHRwG3LS0cSZIGllKgvgwcm+SYJA8ETgU29xOWJGnaLbqJr6p2JXkd8GngAOD8qtqyhFiGat5oxKTEapz9aiXOVuJYiHH2b1Ji7SXORQ+SkCRplJxJQpLUJAuUJKlJTRSoVqdMSnJ0kquSbE2yJcmZ3frDklyR5Kbu/tBxxwqD2T2SfDXJ5d3jY5Jc08V5YTeYZdwxHpLk4iTf7Pbr0xven3/d/d1vTPKRJA8e5z5tNU/AXBlRjBORK6PMk7EXqManTNoFnFVVjwNOBF7bxbYRuLKqjgWu7B634Exg66zH5wLv6uL8IXDGWKL6Ve8GPlVVjwWeyCDe5vZnkiOBvwLWVdUTGAwEOpUx7dPG8wTMlVFoPldGnidVNdYb8HTg07Mevwl407jjmifWy4DnMzjLf1W3bhXwrQZiO4rBF/Y5wOUMTqTeCRw4134eU4y/DnyPbnDOrPUt7s8jgVuAwxiMdr0c+INx7dNJypMuPnNlaTFORK6MOk/GfgTFff/A3bZ365qSZA3wJOAa4Iiq2gHQ3T9yfJHt8Y/AG4F7u8eHAz+qql3d4xb266OBO4F/65pX/jXJQ2lwf1bVrcA7gO8DO4AfA9cxvn06EXkC5kpPJiJXRp0nLRSooaZMGqckBwOXAK+vqp+MO569JXkRcEdVXTd79Rybjnu/Hgg8GXhvVT0J+BntNPn8iq5t/2TgGOBRwEMZNK/tbbn2aYt/z32YK72ZiFwZdZ60UKCanjIpyUEMEu7DVXVpt/r2JKu651cBd4wrvs5JwIuTbGMwq/xzGPxKPCTJ7pOxW9iv24HtVXVN9/hiBknY2v4EeB7wvaq6s6p+CVwKPIPx7dOm8wTMlZ5NSq6MNE9aKFDNTpmUJMB5wNaqeuespzYDp3fLpzNobx+bqnpTVR1VVWsY7L/PVtUrgKuAU7rNWojzB8AtSY7rVj0X+AaN7c/O94ETkzyk+x7sjnVc+7TZPAFzpW8TlCujzZNxdrDN6mh7AfBt4DvAW8Ydz6y4fofBoekNwPXd7QUM2qyvBG7q7g8bd6yzYn4WcHm3/GjgS8DNwEXAgxqIby1wbbdP/wM4tNX9CbwN+CZwI/Ah4EHj3Ket5kkXm7nSf3wTkSujzBOnOpIkNamFJj5JkvZhgZIkNckCJUlqkgVKktQkC5QkqUkWqAmX5KVJKsljxx2L1CrzZDJZoCbfacAXGJx0KGlu5skEskBNsG7es5MYTGV/arfuAUne012f5fIkn0xySvfcCUn+K8l1ST69e8oUaSUzTyaXBWqyvYTB9WK+DdyV5MnAHwNrgN8CXs1gqvvd86T9E3BKVZ0AnA/83TiClpaZeTKhDlx4EzXsNAYTXcJg4svTgIOAi6rqXuAHSa7qnj8OeAJwxWDKLA5gMD2+tNKZJxPKAjWhkhzOYCbmJyQpBolUwMfnewmwpaqevkwhSmNnnkw2m/gm1ynAB6vqN6pqTVUdzeAKnDuBl3Vt7EcwmBATBlfinEmypykjyePHEbi0jMyTCWaBmlynse+vwEsYXDRsO4OZhd/H4KqmP66qXzBI1nOTfI3BbNPPWL5wpbEwTyaYs5mvQEkOrqq7u+aNLwEn1eD6MpI65kn77INamS5PcgjwQODtJp00J/OkcR5BSZKaZB+UJKlJFihJUpMsUJKkJlmgJElNskBJkpr0/5Eg5wHW1Ve3AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(titanic_train, col='Survived')\n",
    "g.map(plt.hist, 'Age', bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Identifying correlation in a single plot, Pclass, Survived w.r.t. Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 514.88x475.2 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid = sns.FacetGrid(titanic_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\n",
    "grid.map(plt.hist, 'Age', alpha=.5, bins=20)\n",
    "grid.add_legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:703: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n",
      "  warnings.warn(warning)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:708: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n",
      "  warnings.warn(warning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x220a6b89860>"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 323.94x475.2 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid = sns.FacetGrid(titanic_train, row='Embarked', size=2.2, aspect=1.6) #Add Sex feature to model training.Complete and add Embarked feature to model training.\n",
    "grid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\n",
    "grid.add_legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "#banding Fare feature w.r.t. Sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:703: UserWarning: Using the barplot function without specifying `order` is likely to produce an incorrect plot.\n",
      "  warnings.warn(warning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x220a5908198>"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 514.88x475.2 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid = sns.FacetGrid(titanic_train, row='Embarked', col='Survived', size=2.2, aspect=1.6)\n",
    "grid.map(sns.barplot, 'Sex', 'Fare', alpha=1, ci=None)\n",
    "grid.add_legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Correcting and completing the Data, Performing logic simultaneously on both the data sets\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before (891, 12) (418, 11) (891, 12) (418, 11)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "('After', (891, 10), (418, 9), (891, 10), (418, 9))"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Before\", titanic_train.shape, titanic_test.shape, titanic[0].shape, titanic[1].shape)\n",
    "\n",
    "titanic_train = titanic_train.drop(['Ticket', 'Cabin'], axis=1)\n",
    "titanic_test = titanic_test.drop(['Ticket', 'Cabin'], axis=1)\n",
    "titanic = [titanic_train, titanic_test]\n",
    "\n",
    "\"After\", titanic_train.shape, titanic_test.shape, titanic[0].shape, titanic[1].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Title Feature for training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Sex</th>\n",
       "      <th>female</th>\n",
       "      <th>male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Don</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dr</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Master</th>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Miss</th>\n",
       "      <td>37</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mme</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mr</th>\n",
       "      <td>83</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mrs</th>\n",
       "      <td>21</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rev</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Sex     female  male\n",
       "Title               \n",
       "Don          0     1\n",
       "Dr           0     3\n",
       "Master       9    14\n",
       "Miss        37    64\n",
       "Mme          0     1\n",
       "Mr          83   145\n",
       "Mrs         21    37\n",
       "Rev          2     1"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:\n",
    "    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "\n",
    "pd.crosstab(titanic_train['Title'], titanic_test['Sex'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing the uncommon titles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Master</td>\n",
       "      <td>0.575000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Miss</td>\n",
       "      <td>0.702703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mr</td>\n",
       "      <td>0.156673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mrs</td>\n",
       "      <td>0.793651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rare</td>\n",
       "      <td>0.347826</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Title  Survived\n",
       "0  Master  0.575000\n",
       "1    Miss  0.702703\n",
       "2      Mr  0.156673\n",
       "3     Mrs  0.793651\n",
       "4    Rare  0.347826"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:\n",
    "    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n",
    " \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n",
    "\n",
    "    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n",
    "    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n",
    "    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n",
    "    \n",
    "titanic_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert the categorical titles to ordinals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch     Fare Embarked  Title  \n",
       "0      0   7.2500        S      1  \n",
       "1      0  71.2833        C      3  \n",
       "2      0   7.9250        S      2  \n",
       "3      0  53.1000        S      3  \n",
       "4      0   8.0500        S      1  "
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n",
    "for dataset in titanic:\n",
    "    dataset['Title'] = dataset['Title'].map(title_mapping)\n",
    "    dataset['Title'] = dataset['Title'].fillna(0)\n",
    "\n",
    "titanic_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As titles are more relevant now we can drop Name feature and also passenger Id as it is of no use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 9), (418, 9))"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train = titanic_train.drop(['Name', 'PassengerId'], axis=1)\n",
    "titanic_test = titanic_test.drop(['Name'], axis=1)\n",
    "titanic = [titanic_train, titanic_test]\n",
    "titanic_train.shape, titanic_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converting strings to numerial values as it is used by all the model algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n",
       "0         0       3    0  22.0      1      0   7.2500        S      1\n",
       "1         1       1    1  38.0      1      0  71.2833        C      3\n",
       "2         1       3    1  26.0      0      0   7.9250        S      2\n",
       "3         1       1    1  35.0      1      0  53.1000        S      3\n",
       "4         0       3    0  35.0      0      0   8.0500        S      1"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:\n",
    "    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n",
    "\n",
    "titanic_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We need to guess missing values in Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0.],\n",
       "       [0., 0., 0.]])"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "guess_ages = np.zeros((2,3))\n",
    "guess_ages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now we iterate over Sex (0 or 1) and Pclass (1, 2, 3) to calculate guessed values of Age for the six combinations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n",
       "0         0       3    0   22      1      0   7.2500        S      1\n",
       "1         1       1    1   38      1      0  71.2833        C      3\n",
       "2         1       3    1   26      0      0   7.9250        S      2\n",
       "3         1       1    1   35      1      0  53.1000        S      3\n",
       "4         0       3    0   35      0      0   8.0500        S      1"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:\n",
    "    for i in range(0, 2):\n",
    "        for j in range(0, 3):\n",
    "            guess_df = dataset[(dataset['Sex'] == i) & \\\n",
    "                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n",
    "\n",
    "            # age_mean = guess_df.mean()\n",
    "            # age_std = guess_df.std()\n",
    "            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n",
    "\n",
    "            age_guess = guess_df.median()\n",
    "\n",
    "            # Convert random age float to nearest .5 age\n",
    "            guess_ages[i,j] = int( age_guess/0.5 + 0.5 ) * 0.5\n",
    "            \n",
    "    for i in range(0, 2):\n",
    "        for j in range(0, 3):\n",
    "            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n",
    "                    'Age'] = guess_ages[i,j]\n",
    "\n",
    "    dataset['Age'] = dataset['Age'].astype(int)\n",
    "\n",
    "titanic_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create Age bands and determine correlations with Survived."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgeBand</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(-0.08, 16.0]</td>\n",
       "      <td>0.550000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(16.0, 32.0]</td>\n",
       "      <td>0.337374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(32.0, 48.0]</td>\n",
       "      <td>0.412037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(48.0, 64.0]</td>\n",
       "      <td>0.434783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(64.0, 80.0]</td>\n",
       "      <td>0.090909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         AgeBand  Survived\n",
       "0  (-0.08, 16.0]  0.550000\n",
       "1   (16.0, 32.0]  0.337374\n",
       "2   (32.0, 48.0]  0.412037\n",
       "3   (48.0, 64.0]  0.434783\n",
       "4   (64.0, 80.0]  0.090909"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train['AgeBand'] = pd.cut(titanic_train['Age'], 5)\n",
    "titanic_train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "#replace Age with ordinals based on these bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>AgeBand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>(16.0, 32.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>3</td>\n",
       "      <td>(32.0, 48.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>(16.0, 32.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>3</td>\n",
       "      <td>(32.0, 48.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>(32.0, 48.0]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title  \\\n",
       "0         0       3    0    1      1      0   7.2500        S      1   \n",
       "1         1       1    1    2      1      0  71.2833        C      3   \n",
       "2         1       3    1    1      0      0   7.9250        S      2   \n",
       "3         1       1    1    2      1      0  53.1000        S      3   \n",
       "4         0       3    0    2      0      0   8.0500        S      1   \n",
       "\n",
       "        AgeBand  \n",
       "0  (16.0, 32.0]  \n",
       "1  (32.0, 48.0]  \n",
       "2  (16.0, 32.0]  \n",
       "3  (32.0, 48.0]  \n",
       "4  (32.0, 48.0]  "
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:    \n",
    "    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n",
    "    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n",
    "    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n",
    "    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n",
    "    dataset.loc[ dataset['Age'] > 64, 'Age']\n",
    "titanic_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Removing age band feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n",
       "0         0       3    0    1      1      0   7.2500        S      1\n",
       "1         1       1    1    2      1      0  71.2833        C      3\n",
       "2         1       3    1    1      0      0   7.9250        S      2\n",
       "3         1       1    1    2      1      0  53.1000        S      3\n",
       "4         0       3    0    2      0      0   8.0500        S      1"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train = titanic_train.drop(['AgeBand'], axis=1)\n",
    "titanic = [titanic_train, titanic_test]\n",
    "titanic_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Embarked has two missing values , we wil fill them up with the most common occurrence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'S'"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_port1 = titanic_train.Embarked.dropna().mode()[0]\n",
    "freq_port1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "for dataset in titanic:\n",
    "    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C</td>\n",
       "      <td>0.553571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Q</td>\n",
       "      <td>0.389610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>S</td>\n",
       "      <td>0.339009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Embarked  Survived\n",
       "0        C  0.553571\n",
       "1        Q  0.389610\n",
       "2        S  0.339009"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting embarked to numrical feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex  Age  SibSp  Parch     Fare  Embarked  Title\n",
       "0         0       3    0    1      1      0   7.2500         0      1\n",
       "1         1       1    1    2      1      0  71.2833         1      3\n",
       "2         1       3    1    1      0      0   7.9250         0      2\n",
       "3         1       1    1    2      1      0  53.1000         0      3\n",
       "4         0       3    0    2      0      0   8.0500         0      1"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:\n",
    "    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n",
    "\n",
    "titanic_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "# round off the fare to two decimals as it represents currency."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass  Sex  Age  SibSp  Parch     Fare  Embarked  Title\n",
       "0          892       3    0    2      0      0   7.8292         2      1\n",
       "1          893       3    1    2      1      0   7.0000         0      3\n",
       "2          894       2    0    3      0      0   9.6875         2      1\n",
       "3          895       3    0    1      0      0   8.6625         0      1\n",
       "4          896       3    1    1      1      1  12.2875         0      3"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_test['Fare'].fillna(titanic_test['Fare'].dropna().median(), inplace=True)\n",
    "titanic_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FareBand</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(-0.001, 7.91]</td>\n",
       "      <td>0.197309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(7.91, 14.454]</td>\n",
       "      <td>0.303571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(14.454, 31.0]</td>\n",
       "      <td>0.454955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(31.0, 512.329]</td>\n",
       "      <td>0.581081</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          FareBand  Survived\n",
       "0   (-0.001, 7.91]  0.197309\n",
       "1   (7.91, 14.454]  0.303571\n",
       "2   (14.454, 31.0]  0.454955\n",
       "3  (31.0, 512.329]  0.581081"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic_train['FareBand'] = pd.qcut(titanic_train['Fare'], 4)\n",
    "titanic_train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass  Sex  Age  SibSp  Parch  Fare  Embarked  Title\n",
       "0         0       3    0    1      1      0     0         0      1\n",
       "1         1       1    1    2      1      0     3         1      3\n",
       "2         1       3    1    1      0      0     1         0      2\n",
       "3         1       1    1    2      1      0     3         0      3\n",
       "4         0       3    0    2      0      0     1         0      1\n",
       "5         0       3    0    1      0      0     1         2      1\n",
       "6         0       1    0    3      0      0     3         0      1\n",
       "7         0       3    0    0      3      1     2         0      4\n",
       "8         1       3    1    1      0      2     1         0      3\n",
       "9         1       2    1    0      1      0     2         1      3"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for dataset in titanic:\n",
    "    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n",
    "    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n",
    "    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n",
    "    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n",
    "    dataset['Fare'] = dataset['Fare'].astype(int)\n",
    "\n",
    "titanic_train = titanic_train.drop(['FareBand'], axis=1)\n",
    "titanic = [titanic_train, titanic_test]\n",
    "    \n",
    "titanic_train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 8), (891,), (418, 8))"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = titanic_train.drop(\"Survived\", axis=1)\n",
    "Y_train = titanic_train[\"Survived\"]\n",
    "X_test  = titanic_test.drop(\"PassengerId\", axis=1).copy()\n",
    "X_train.shape, Y_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "79.69"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Logistic Regression\n",
    "\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, Y_train)\n",
    "Y_pred = logreg.predict(X_test)\n",
    "acc_log = round(logreg.score(X_train, Y_train) * 100, 2)\n",
    "acc_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Descion Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "89.11"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decision_tree = DecisionTreeClassifier()\n",
    "decision_tree.fit(X_train, Y_train)\n",
    "Y_pred = decision_tree.predict(X_test)\n",
    "acc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\n",
    "acc_decision_tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "89.11"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest = RandomForestClassifier(n_estimators=100)\n",
    "random_forest.fit(X_train, Y_train)\n",
    "Y_pred = random_forest.predict(X_test)\n",
    "random_forest.score(X_train, Y_train)\n",
    "acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\n",
    "acc_random_forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
